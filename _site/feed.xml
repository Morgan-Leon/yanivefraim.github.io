<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memoirs of a Front End Developer</title>
    <description>Advanced Front End topics
</description>
    <link>http://yanivefraim.github.io//</link>
    <atom:link href="http://yanivefraim.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 21 May 2015 00:03:04 +0300</pubDate>
    <lastBuildDate>Thu, 21 May 2015 00:03:04 +0300</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Real World Angularjs (video)</title>
        <description>&lt;p&gt;This is my video from AngularJS-IL, talking about Real World AngularJS tip (Hebrew...)&lt;/p&gt;

&lt;p&gt;Enjoy![youtube https://www.youtube.com/watch?v=3Wnjx0nKlqE]&lt;/p&gt;

&lt;p&gt;The slides can be found here:&lt;/p&gt;

&lt;p&gt;http://slides.com/yanivefraim-1/real-world-angularjs&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Jan 2015 16:34:25 +0200</pubDate>
        <link>http://yanivefraim.github.io//2015/01/16/real-world-angularjs-video.html</link>
        <guid isPermaLink="true">http://yanivefraim.github.io//2015/01/16/real-world-angularjs-video.html</guid>
        
        <category>Angularjs</category>
        
        <category>Javascript</category>
        
        
      </item>
    
      <item>
        <title>Git stash like a boss</title>
        <description>&lt;p&gt;Git stash is awesome. You work on a feature/bug and suddenly having a context switch  (a new urgent hotfix / a team member asking for help in another brunch). Now, you want to save your work aside without committing it.
Git stash FTW!&lt;/p&gt;

&lt;p&gt;A basic stash will be:&lt;/p&gt;

&lt;p class=&#39;post-p&#39;&gt;Saving a stash&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&#39;post-p&#39;&gt;Save a stash with a save name:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;my temp work&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&#39;post-p&#39;&gt;Fetching back last stash, popping it from stash stack&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&#39;post-p&#39;&gt;Fetching back last stash, leaving it on stash stack&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&#39;post-p&#39;&gt;As you can see, stash is a stack of changes. What if you want to fetch an old stash?
Retrieving list of stashes&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&#39;post-p&#39;&gt;This will produce a list of stashes:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;On&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;292&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;On&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;350&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vast&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fake&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;On&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;315&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vast&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;another&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fake&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;On&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;350&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vast&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validator&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;On&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;292&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;11.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&#39;post-p&#39;&gt;In order to fetch a specific stash:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&#39;post-p&#39;&gt;Or&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&#39;post-p&#39;&gt;And a last tip: you can see stash&#39;s changes by:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Good luck!&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Jan 2015 16:34:25 +0200</pubDate>
        <link>http://yanivefraim.github.io//2015/01/15/git-stash-like-a-boss.html</link>
        <guid isPermaLink="true">http://yanivefraim.github.io//2015/01/15/git-stash-like-a-boss.html</guid>
        
        <category>Angularjs</category>
        
        <category>Javascript</category>
        
        
      </item>
    
      <item>
        <title>Handling static files versioning using grunt-hashres</title>
        <description>&lt;p&gt;While looking for a simple but yet effective way to handle my static file versions, I found the awesome grunt-hashres Grunt plugin. Its job is to give each static file a unique version and also update references to the file with current version. awesome.&lt;/p&gt;

&lt;p&gt;Installing the plugin:
&lt;script src=&quot;https://gist.github.com/02c0a06b7968b19141c8.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Configurations are easy. Just add the files you want to update and the files containing the references to them:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/d55a2d2aa3959d3bba8f.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This is how my &amp;quot;stage&amp;quot; folder looks like:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/article_images/2015-01-06-handling-static-files-versioning-using-grunt-hashres/image1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;While the references to those static files automatically updated to be&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/02e6a7a6e831c3724b43.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;That&amp;#39;s it. Quick and simple. For a complete flow example, you can refer to my Angular-realworld demo.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Jan 2015 16:34:25 +0200</pubDate>
        <link>http://yanivefraim.github.io//2015/01/06/handling-static-files-versioning-using-grunt-hashres.html</link>
        <guid isPermaLink="true">http://yanivefraim.github.io//2015/01/06/handling-static-files-versioning-using-grunt-hashres.html</guid>
        
        <category>Angularjs</category>
        
        <category>Javascript</category>
        
        
      </item>
    
      <item>
        <title>Splitting large Grunt files using node.js export capabilities</title>
        <description>&lt;p&gt;Grunt is an awesome tool. I use it everyday and I cannot think of working without it. As time passed by, our Gruntfile.js file became really big, and managing this file has become a real bummer. Since Grunt&amp;#39;s best practices recommend using one and only one Gruntfile.js per repository, the solution should be using smaller project&amp;#39;s files and import it to the main Gruntfile.js using node.js export/require capabilities.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s get straight to the point. Assume we have two (very simple) projects, on the same repository, with the following Gruntfile.js:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/08351ce4bd270f0b27a0.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;While this is a super simple example, it demonstrates how a Gruntfile.js can become a very large file, very fast. Just imagine that you have 4-5 projects using ~10 Grunt plugins each. A real nightmare...&lt;/p&gt;

&lt;p&gt;Node.js export / require to the rescue!&lt;/p&gt;

&lt;p&gt;We will now create two files, project1.js and project2.js (I will demonstrate project1.js here. For this simple example project2.js is pretty much the same)&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/9e11fbb49110dd34e39f.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;And now your Gruntfile.js will look something similar to this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/cada77737b1d0a71ddec.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;That&amp;#39;s it! Your projects are now handled in different Grunt configuration files, which makes it much simpler to handle.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Jan 2015 16:34:25 +0200</pubDate>
        <link>http://yanivefraim.github.io//2015/01/01/splitting-large-grunt-files-using-node-js-export-capabilities.html</link>
        <guid isPermaLink="true">http://yanivefraim.github.io//2015/01/01/splitting-large-grunt-files-using-node-js-export-capabilities.html</guid>
        
        <category>Angularjs</category>
        
        <category>Javascript</category>
        
        
      </item>
    
      <item>
        <title>Pre caching AngularJS templates using html2js</title>
        <description>&lt;p&gt;Using AngularJS templates / partials is awesome. It gives you the ability to be modular. The problem with that is that it creates an extra http request for each template (assuming you have a different template file for each template, which you should!). &lt;/p&gt;

&lt;p&gt;A cool trick is using Grunt/Gulp plugin called html2js (if you&amp;#39;re not using Grunt.js/Gulp.js, this could be a great time to start to). This plugin will pre compile all of your html templates to javascript, wrapping it as an Angular.js module and putting it into $templateCache. The output javascript could be concatenated into the main js file, minified and gZipped. Cool... &lt;/p&gt;

&lt;p&gt;Installing the plugin: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Grunt
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html2js&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dev&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Gulp
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html2js&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Configuration file should look something like this (Grunt)&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/6fa1eab9230fad51ea7a.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This will create a module named &amp;quot;app.templates&amp;quot;, which you will be able to add as a dependency to your main app. You will also have to pre-compile the cached templates: &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/3d023cc1388e3fa22ced.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;An example for a simple auto-generated javascript file: &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/5ffdfcd19a29c4de1a0c.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;For a complete demo using html2js you can refer to my &lt;a href=&quot;https://github.com/yanivefraim/angularjs-realworld&quot;&gt;angularjs-realworld&lt;/a&gt; demo in Github.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Nov 2014 16:34:25 +0200</pubDate>
        <link>http://yanivefraim.github.io//2014/11/15/pre-caching-angularjs-templates-using-html2js.html</link>
        <guid isPermaLink="true">http://yanivefraim.github.io//2014/11/15/pre-caching-angularjs-templates-using-html2js.html</guid>
        
        <category>Angularjs</category>
        
        <category>Javascript</category>
        
        
      </item>
    
  </channel>
</rss>
