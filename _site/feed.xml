<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Memoirs of a Front End Developer</title>
    <description>Advanced Front End topics
</description>
    <link>http://yanivefraim.github.io//</link>
    <atom:link href="http://yanivefraim.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 27 May 2015 08:29:27 +0300</pubDate>
    <lastBuildDate>Wed, 27 May 2015 08:29:27 +0300</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Be ready for Angular 2 Today - !!Draft - a work in progress!!</title>
        <description>&lt;p&gt;Angular 2 is not here. It will take pretty long time until we&amp;#39;ll start using it. But, as you probably heard, the changes are &lt;a href=&quot;todo:%20add%20changes%20list%20blog%20link%20here&quot;&gt;HUGE&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a good enough reason to start preparing for Angular 2 today (otherwise the migration path will be paintfull). &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Another important point: a lot of new projects do not use Angular because of the fear of the new Angular 2 (or, &amp;quot;why should I start a new project using Angular 1.x when soon I&amp;#39;ll have to go through a paintfull migration path?&amp;quot;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, I&amp;#39;ll get streight to the point: what do we need to do today in order to make the migration to Angular 2 easier? 
I summed it up to there steps, from the most important and complicated to the easiest:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use Component based Architecture&lt;/li&gt;
&lt;li&gt;Write Angular 1.x in ES6/Typescript&lt;/li&gt;
&lt;li&gt;Use the &amp;quot;new router&amp;quot;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;1. Use Component based Architecture&lt;/h2&gt;

&lt;p&gt;This is the most important part, and the hardest one. 
Angular 2.x, similar to React, is based on components. It uses component structure hierarchy (TODO: add link here). Angular 1.x does not work that way. The easiest way to understand this is through an example. I will use the &lt;a href=&quot;https://docs.angularjs.org/tutorial&quot;&gt;phonecat demo&lt;/a&gt; as an example. Take a look at this code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;container-fluid&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;row&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;col-md-2&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!--Sidebar content--&amp;gt;&lt;/span&gt;
      Search: &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;query&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      Sort by:
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;select&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-model=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;orderProp&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;option&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Alphabetical&lt;span class=&quot;nt&quot;&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;option&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Newest&lt;span class=&quot;nt&quot;&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;col-md-10&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!--Body content--&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;phones&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;phone in phones | filter:query | orderBy:orderProp&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;thumbnail phone-listing&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#/phones/&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;thumb&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#/phones/&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is how it will look like:
--image here--&lt;/p&gt;

&lt;p&gt;We would like to achieve two things:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Break this html into components.&lt;/li&gt;
&lt;li&gt;Build the components as a hierarchy tree. Something like this:&lt;/li&gt;
&lt;/ol&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;
    &lt;img src=&quot;/assets/article_images/2015-05-21-be-ready-for-angular2-today/app_structure.png&quot; alt=&quot;&quot;&gt;
&lt;/p&gt;

&lt;h6&gt;Breaking the code into components&lt;/h6&gt;

&lt;p&gt;We will want to build several components:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application main component (this will be used for the parent component in the hierarchy)&lt;/li&gt;
&lt;li&gt;Search component&lt;/li&gt;
&lt;li&gt;List component&lt;/li&gt;
&lt;li&gt;List item component (I will emit this component from my example, just in order to keep things simple)&lt;/li&gt;
&lt;li&gt;Catalog details component&lt;/li&gt;
&lt;/ul&gt;

&lt;h6&gt;Creating a hierarchy tree&lt;/h6&gt;

&lt;!--- &gt;There are several great posts showing how to do it using directive&#39;s transclude property (see [here](https://www.airpair.com/angularjs/posts/creating-container-components-part-2-angular-1-directives) and [here](https://www.airpair.com/angularjs/posts/component-based-angularjs-directives)). While this is possible, it has several disadvantages: It uses scope and controllers and I think that it is too complicated.  

I will try to do it using a simpler approach, similar to what is done in Facebook&#39;s [React](https://facebook.github.io/react/).
--&gt;

&lt;p&gt;Angular 2.0 uses an approach similar to Facebook&amp;#39;s &lt;a href=&quot;https://facebook.github.io/react/&quot;&gt;React.js&amp;#39;s&lt;/a&gt; approach, and this is the tricky part. The main issue here is to correctly pass data/state between components, with minimum usage of scope or controllers (as you probably heard, Angular 2.x does not have scope or controllers...). &lt;/p&gt;

&lt;p&gt;Let&amp;#39;s call it &amp;#39;The React way&amp;#39;...&lt;/p&gt;

&lt;h5&gt;The &amp;#39;React way&amp;#39;&lt;/h5&gt;

&lt;p&gt;React.js uses state and props to manage its data. Props are immutable and are passed from parent to child. They are owned by the parent and they cannot be changed by the component. State, on the other hand, is private and mutable (it can be changed by the component). For child-parent communication it uses simple events, in order to invoke methods on the parent.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;For more reference see those awesome tutorials &lt;a href=&quot;https://facebook.github.io/react/docs/thinking-in-react.html&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://facebook.github.io/react/docs/tutorial.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will now have a main &amp;#39;phonecat-component&amp;#39; which will hold a &amp;#39;phonecat-search&amp;#39; and a &amp;#39;phonecat-list&amp;#39; child components. Those two child components will get all the data they need from their parent, via attributes.
It should look somehting like this (The complete example can be found in the following &lt;a href=&quot;http://plnkr.co/edit/ApnNBZL3O4TyVMToTcZi?p=preview&quot;&gt;plunker&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- body --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ng-controller=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;PhoneListCtrl as phoneCtrl&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;phonecat-component&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;phones=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;phoneCtrl.phones&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/phonecat-component&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--phonecat-component template--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;container-fluid&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;row&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;col-md-2&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;phonecat-search&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;search=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;vm.search(searchData)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/phonecat-search&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;col-md-10&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &amp;#39;&lt;span class=&quot;nt&quot;&gt;&amp;lt;phonecat-list&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;phones=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;vm.phones&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;filter-data=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;vm.filterData&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/phonecat-list&amp;gt;&lt;/span&gt;&amp;#39;,    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;

&lt;p&gt;As you can see, our body contains only one main component &amp;#39;phonecat-component&amp;#39;. Its directive is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;phonecatApp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;phonecatComponent&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;phonecatComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;phonecatComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;bindToController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;phones&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;=&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;elm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ctrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;ctrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filterData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;orderBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//default search filter&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;ctrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;search&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;searchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;ctrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filterData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;searchData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;controllerAs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;vm&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;partials/phonecatComponent.tpl.html&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are several points to stop and discuss here:
- We use &amp;#39;bindToController&amp;#39; to pass &amp;#39;phones&amp;#39;, via attribute, to the  &amp;#39;phonecat-component&amp;#39; (see snippet below for more details).&lt;/p&gt;
</description>
        <pubDate>Thu, 21 May 2015 17:34:25 +0300</pubDate>
        <link>http://yanivefraim.github.io//2015/05/21/be-ready-for-angular2-today.html</link>
        <guid isPermaLink="true">http://yanivefraim.github.io//2015/05/21/be-ready-for-angular2-today.html</guid>
        
        <category>Angularjs</category>
        
        <category>Javascript</category>
        
        
      </item>
    
      <item>
        <title>Chain your Promises: no more Promise soup!</title>
        <description>&lt;p&gt;I love Promises. We use it in all our projects. It can be used with AngularJS, jQuery or even Vanilla Javascript. I will not explain about Promises basics here, if you are not familiar with Promises, take a look here, here and here.&lt;/p&gt;

&lt;p&gt;The interesting stuff starts when there are several serial actions (sometimes with different operations between them).&lt;/p&gt;

&lt;p&gt;Without chaining, you will quickly find yourself writing a &amp;quot;Promise Soup&amp;quot; (all examples are in jQuery. It is pretty much the same for all other options, with slight syntax differences):&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/6299f93a14ec72676294.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Wow. This is exactly what Promises intended to prevent in the first place!&lt;/p&gt;

&lt;h3&gt;chaining promises&lt;/h3&gt;

&lt;p&gt;For this simple example, chaining should be pretty straightforward:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/275da91ed13edb214068.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Cool. This is much cleaner and easier to read.&lt;/p&gt;

&lt;p&gt;Now, for a complete example (&lt;a href=&quot;&amp;#x27;http://jsbin.com/bupice/4/edit?js,console&amp;#x27;&quot;&gt;jsBin&lt;/a&gt;):&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/e890f080feec2161dafc.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The really cool things here are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can listen to fail/error events in one place. An error will stop the chaining and get to the closest fail statement. (&lt;a href=&quot;&amp;#x27;http://jsbin.com/bupice/5/edit?js,console&amp;#x27;&quot;&gt;jsBin&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Resolved data will be passed to chained function.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Disadvantages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Passing data between &amp;quot;getA&amp;quot; to &amp;quot;getC&amp;quot; must go via &amp;quot;getB&amp;quot; (or a global object)&lt;/li&gt;
&lt;li&gt;Harder to implement when there are conditional calls to serial methods (&amp;quot;getB&amp;quot; is called only if some condition applies in &amp;quot;aData&amp;quot;, for example)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;#39;s it. Keep on chaining! &lt;/p&gt;
</description>
        <pubDate>Sun, 08 Feb 2015 16:34:25 +0200</pubDate>
        <link>http://yanivefraim.github.io//2015/02/08/chain-your-promises-no-more-promise-soup.html</link>
        <guid isPermaLink="true">http://yanivefraim.github.io//2015/02/08/chain-your-promises-no-more-promise-soup.html</guid>
        
        <category>Angularjs</category>
        
        <category>Javascript</category>
        
        
      </item>
    
      <item>
        <title>Debug mobile apps like a pro (part 1)</title>
        <description>&lt;p&gt;Debugging mobile apps can be tricky. Especially when debugging production apps. One of our team&amp;#39;s most powerful tools is Charles Proxy. It is used by QA, Developers and even by other non R&amp;amp;D teams.&lt;/p&gt;

&lt;p&gt;Here I will demonstrate some super easy and super powerful techniques used to debug/monitor our mobile app. (By the way - most of the stuff here are true for regular desktop/mobile web apps as well)&lt;/p&gt;

&lt;h3&gt;Connect your mobile device to your Mac/PC&lt;/h3&gt;

&lt;p&gt;So - lets get started. First you will have to connect your device to your PC/Mac. This is SUPER easy when using Charles (both mobile device and computer should be on the same network):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Check your network&amp;#39;s local IP address. The simplest way is using Charles&amp;#39; help menu:&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Connect your mobile device to this address:&lt;/p&gt;

&lt;p&gt;2.1. Android (OS 4.X and above. For Android 2.X look here)
Go to settings-&amp;gt;network-&amp;gt;wifi and long press your selected network. Then choose the following settings (the IP is the IP you located in previous section)&lt;/p&gt;

&lt;p&gt;2.2. iOS
Go to wifi settings and choose your internal network&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Charles will ask for your approval (only first time you connect your device):&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And... That&amp;#39;s it. You are connected and are ready to get started!&lt;/p&gt;

&lt;h3&gt;Monitor mobile traffic&lt;/h3&gt;

&lt;p&gt;The first thing to do is monitor your mobile app&amp;#39;s traffic. Lets choose IMDB as a &amp;quot;victim&amp;quot; app and monitor its traffic. I&amp;#39;ll choose &amp;quot;record&amp;quot; button and open IMDB. This is what we&amp;#39;ll see:&lt;/p&gt;

&lt;p&gt;What we sees here is filter I created with imdbws.com as a domain. You can set focussed domains on &amp;quot;view-&amp;gt;FocussedHosts&amp;quot;. From here we can monitor all request/response data, including timing charts!&lt;/p&gt;

&lt;p&gt;Request data&lt;/p&gt;

&lt;p&gt;Response Data&lt;/p&gt;

&lt;p&gt;Time Charts&lt;/p&gt;

&lt;p&gt;In the next part of this post I will show some advanced, super powerful use cases, like setting Rewrite rules (for changing request response on the fly), Throttling (for testing different network speeds), Using VPN, routing the traffic to staging servers and more...&lt;/p&gt;
</description>
        <pubDate>Mon, 19 Jan 2015 16:34:25 +0200</pubDate>
        <link>http://yanivefraim.github.io//2015/01/19/debug-mobile-apps-like-a-pro-part-1.html</link>
        <guid isPermaLink="true">http://yanivefraim.github.io//2015/01/19/debug-mobile-apps-like-a-pro-part-1.html</guid>
        
        <category>Angularjs</category>
        
        <category>Javascript</category>
        
        
      </item>
    
      <item>
        <title>Real World Angularjs (video)</title>
        <description>&lt;p&gt;This is my video from AngularJS-IL, talking about Real World AngularJS tip (Hebrew...)&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/3Wnjx0nKlqE&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The slides:
&lt;iframe src=&quot;//slides.com/yanivefraim-1/real-world-angularjs/embed&quot; width=&quot;576&quot; height=&quot;420&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 16 Jan 2015 16:34:25 +0200</pubDate>
        <link>http://yanivefraim.github.io//2015/01/16/real-world-angularjs-video.html</link>
        <guid isPermaLink="true">http://yanivefraim.github.io//2015/01/16/real-world-angularjs-video.html</guid>
        
        <category>Angularjs</category>
        
        <category>Javascript</category>
        
        
      </item>
    
      <item>
        <title>Git stash like a boss</title>
        <description>&lt;p&gt;Git stash is awesome. You work on a feature/bug and suddenly having a context switch  (a new urgent hotfix / a team member asking for help in another brunch). Now, you want to save your work aside without committing it.
Git stash FTW!&lt;/p&gt;

&lt;p&gt;A basic stash will be:&lt;/p&gt;

&lt;p class=&#39;post-p&#39;&gt;Saving a stash&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&#39;post-p&#39;&gt;Save a stash with a save name:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;my temp work&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&#39;post-p&#39;&gt;Fetching back last stash, popping it from stash stack&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&#39;post-p&#39;&gt;Fetching back last stash, leaving it on stash stack&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&#39;post-p&#39;&gt;As you can see, stash is a stack of changes. What if you want to fetch an old stash?
Retrieving list of stashes&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&#39;post-p&#39;&gt;This will produce a list of stashes:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;On&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;292&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mock&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;On&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;350&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vast&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fake&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;On&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;315&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vast&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;another&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fake&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;On&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;350&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vast&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validator&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;On&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;feature&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;AD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;292&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;11.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&#39;post-p&#39;&gt;In order to fetch a specific stash:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&#39;post-p&#39;&gt;Or&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&#39;post-p&#39;&gt;And a last tip: you can see stash&#39;s changes by:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;show&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;stash&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Good luck!&lt;/p&gt;
</description>
        <pubDate>Thu, 15 Jan 2015 16:34:25 +0200</pubDate>
        <link>http://yanivefraim.github.io//2015/01/15/git-stash-like-a-boss.html</link>
        <guid isPermaLink="true">http://yanivefraim.github.io//2015/01/15/git-stash-like-a-boss.html</guid>
        
        <category>Angularjs</category>
        
        <category>Javascript</category>
        
        
      </item>
    
      <item>
        <title>Handling static files versioning using grunt-hashres</title>
        <description>&lt;p&gt;While looking for a simple but yet effective way to handle my static file versions, I found the awesome grunt-hashres Grunt plugin. Its job is to give each static file a unique version and also update references to the file with current version. awesome.&lt;/p&gt;

&lt;p&gt;Installing the plugin:
&lt;script src=&quot;https://gist.github.com/02c0a06b7968b19141c8.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Configurations are easy. Just add the files you want to update and the files containing the references to them:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/d55a2d2aa3959d3bba8f.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;This is how my &amp;quot;stage&amp;quot; folder looks like:&lt;/p&gt;

&lt;p style=&quot;text-align:center;&quot;&gt;
    &lt;img src=&quot;/assets/article_images/2015-01-06-handling-static-files-versioning-using-grunt-hashres/image1.png&quot; alt=&quot;&quot;&gt;
&lt;/p&gt;

&lt;p&gt;While the references to those static files automatically updated to be:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/02e6a7a6e831c3724b43.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;That&amp;#39;s it. Quick and simple. For a complete flow example, you can refer to my Angular-realworld demo.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Jan 2015 16:34:25 +0200</pubDate>
        <link>http://yanivefraim.github.io//2015/01/06/handling-static-files-versioning-using-grunt-hashres.html</link>
        <guid isPermaLink="true">http://yanivefraim.github.io//2015/01/06/handling-static-files-versioning-using-grunt-hashres.html</guid>
        
        <category>Angularjs</category>
        
        <category>Javascript</category>
        
        
      </item>
    
      <item>
        <title>Splitting large Grunt files using node.js export capabilities</title>
        <description>&lt;p&gt;Grunt is an awesome tool. I use it everyday and I cannot think of working without it. As time passed by, our Gruntfile.js file became really big, and managing this file has become a real bummer. Since Grunt&amp;#39;s best practices recommend using one and only one Gruntfile.js per repository, the solution should be using smaller project&amp;#39;s files and import it to the main Gruntfile.js using node.js export/require capabilities.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s get straight to the point. Assume we have two (very simple) projects, on the same repository, with the following Gruntfile.js:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/08351ce4bd270f0b27a0.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;While this is a super simple example, it demonstrates how a Gruntfile.js can become a very large file, very fast. Just imagine that you have 4-5 projects using ~10 Grunt plugins each. A real nightmare...&lt;/p&gt;

&lt;p&gt;Node.js export / require to the rescue!&lt;/p&gt;

&lt;p&gt;We will now create two files, project1.js and project2.js (I will demonstrate project1.js here. For this simple example project2.js is pretty much the same)&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/9e11fbb49110dd34e39f.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;And now your Gruntfile.js will look something similar to this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/cada77737b1d0a71ddec.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;That&amp;#39;s it! Your projects are now handled in different Grunt configuration files, which makes it much simpler to handle.&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Jan 2015 16:34:25 +0200</pubDate>
        <link>http://yanivefraim.github.io//2015/01/01/splitting-large-grunt-files-using-node-js-export-capabilities.html</link>
        <guid isPermaLink="true">http://yanivefraim.github.io//2015/01/01/splitting-large-grunt-files-using-node-js-export-capabilities.html</guid>
        
        <category>Angularjs</category>
        
        <category>Javascript</category>
        
        
      </item>
    
      <item>
        <title>Pre caching AngularJS templates using html2js</title>
        <description>&lt;p&gt;Using AngularJS templates / partials is awesome. It gives you the ability to be modular. The problem with that is that it creates an extra http request for each template (assuming you have a different template file for each template, which you should!). &lt;/p&gt;

&lt;p&gt;A cool trick is using Grunt/Gulp plugin called html2js (if you&amp;#39;re not using Grunt.js/Gulp.js, this could be a great time to start to). This plugin will pre compile all of your html templates to javascript, wrapping it as an Angular.js module and putting it into $templateCache. The output javascript could be concatenated into the main js file, minified and gZipped. Cool... &lt;/p&gt;

&lt;p&gt;Installing the plugin: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Grunt
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html2js&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dev&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Gulp
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dev&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;html2js&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Configuration file should look something like this (Grunt)&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/6fa1eab9230fad51ea7a.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This will create a module named &amp;quot;app.templates&amp;quot;, which you will be able to add as a dependency to your main app. You will also have to pre-compile the cached templates: &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/3d023cc1388e3fa22ced.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;An example for a simple auto-generated javascript file: &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/5ffdfcd19a29c4de1a0c.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;For a complete demo using html2js you can refer to my &lt;a href=&quot;https://github.com/yanivefraim/angularjs-realworld&quot;&gt;angularjs-realworld&lt;/a&gt; demo in Github.&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Nov 2014 16:34:25 +0200</pubDate>
        <link>http://yanivefraim.github.io//2014/11/15/pre-caching-angularjs-templates-using-html2js.html</link>
        <guid isPermaLink="true">http://yanivefraim.github.io//2014/11/15/pre-caching-angularjs-templates-using-html2js.html</guid>
        
        <category>Angularjs</category>
        
        <category>Javascript</category>
        
        
      </item>
    
  </channel>
</rss>
